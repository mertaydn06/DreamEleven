@model CreateTeamViewModel
@using DreamEleven.Entities
@using DreamEleven.Web.Helpers

@{
    ViewBag.Title = "Takım Oluştur";
    var allPlayers = ViewBag.AllPlayers as List<Player> ?? new List<Player>();
    var formations = ViewBag.Formations as List<string> ?? new List<string>();
}

<div class="container mt-4">
    <form asp-action="Create" method="post">
        <div class="row">
            <div class="col-md-4 d-flex flex-column" style="margin-top: 55px;">
                <div class="mb-3">
                    <label class="form-label text-light">Takım Adı</label>
                    <input type="text" class="form-control" asp-for="TeamName" required />
                </div>

                <div class="mb-3">
                    <label class="form-label text-light">Diziliş Seç</label>
                    <select class="form-select" id="formationSelect">
                        @foreach (var formation in formations.OrderBy(f => int.Parse(f.Split('-')[0])))
                        {
                            var selected = (string.IsNullOrEmpty(Model.Formation) && formation == "4-4-2") ||
                            Model.Formation == formation;
                            <option value="@formation" selected="@(selected)">@formation</option>
                        }
                    </select>
                </div>
            </div>

            <div class="col-md-8">
                <h2 class="text-center mb-4 text-light">Takım Oluştur</h2>
                <div class="football-field position-relative">
                    <div class="penalty-box top-box">
                        <div class="penalty-dot"></div>
                    </div>
                    <div class="penalty-box bottom-box">
                        <div class="penalty-dot"></div>
                    </div>

                    <div id="playerPositions" class="position-relative h-100">
                        @for (int i = 0; i < Model.Players.Count; i++)
                        {
                            var slot = Model.Players[i].PositionSlot;
                            var positionType = FormationSlotMapper.GetPositionType(slot);
                            var filtered = allPlayers.Where(p => p.Position == positionType).ToList();

                            <div class="player-slot position-absolute" data-position="@slot"
                                style="transform: translate(-50%, -50%);">
                                @if (Model.Players[i].PlayerId > 0)
                                {
                                    var selectedPlayer = filtered.FirstOrDefault(p => p.Id == Model.Players[i].PlayerId);
                                    if (selectedPlayer != null)
                                    {
                                        <div class="player-card">
                                            <img src="@selectedPlayer.ImageUrl" alt="@selectedPlayer.Name">
                                            <div class="player-info">
                                                <div class="player-name">@selectedPlayer.Name</div>
                                                <div class="player-overall">@selectedPlayer.Overall</div>
                                            </div>
                                        </div>
                                    }
                                }

                                <button type="button"
                                    class="btn btn-light rounded-circle position-select @(Model.Players[i].PlayerId > 0 ? "btn-success" : "")"
                                    data-bs-toggle="modal" data-bs-target="#playerModal@(i)">
                                    <i class="bi bi-person-fill"></i>
                                </button>
                            </div>

                            <div class="modal fade" id="playerModal@(i)" tabindex="-1"
                                aria-labelledby="playerModalLabel@(i)" aria-hidden="true">
                                <div class="modal-dialog modal-lg">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="playerModalLabel@(i)">@positionType Oyuncusu Seç
                                            </h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal"
                                                aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            <div class="row row-cols-1 row-cols-md-2 g-4">
                                                @foreach (var player in filtered.OrderByDescending(p => p.Overall))
                                                {
                                                    <div class="col">
                                                        <div class="card h-100 modal-player-card @(Model.Players[i].PlayerId == player.Id ? "selected" : "")"
                                                            onclick="selectPlayerCard(@i, @player.Id, this, '@player.ImageUrl', @player.Overall, '@player.Name')">
                                                            <div class="row g-0">
                                                                <div
                                                                    class="col-md-4 d-flex align-items-center justify-content-center p-2">
                                                                    <img src="@player.ImageUrl" class="img-fluid rounded"
                                                                        alt="@player.Name"
                                                                        style="height: 120px; width: 120px; object-fit: cover;">
                                                                </div>
                                                                <div class="col-md-8">
                                                                    <div class="card-body position-relative">
                                                                        <div class="overall-badge">
                                                                            <span
                                                                                class="badge bg-primary rounded-pill">@player.Overall</span>
                                                                        </div>
                                                                        <h5 class="card-title mb-1">@player.Name</h5>
                                                                        <p class="card-text mb-2">
                                                                            <small>@player.RealTeam</small>
                                                                        </p>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>

                                            <input type="hidden" name="Players[@i].PlayerId" id="playerSelect@(i)"
                                                value="@Model.Players[i].PlayerId" />
                                            <input type="hidden" name="Players[@i].PositionSlot" value="@slot" />
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary"
                                                data-bs-dismiss="modal">Kapat</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <div class="text-center mt-4">
                    <input type="hidden" name="Formation" id="Formation" value="@Model.Formation" />
                    <button type="submit" id="saveTeamBtn" class="btn btn-success btn-lg">Takımı Kaydet</button>
                </div>
            </div>
        </div>
    </form>
</div>



@section Scripts {
    <script>
        function selectPlayerCard(index, playerId, card, playerImage, playerOverall, playerName) {
            const allCards = card.closest('.modal-body').querySelectorAll('.player-card');
            allCards.forEach(c => c.classList.remove('selected'));
            card.classList.add('selected');

            document.getElementById('playerSelect' + index).value = playerId;

            const playerSlot = document.querySelector(`[data-position="${slotFromIndex(index)}"]`);
            playerSlot.innerHTML = `
                <div class="player-card" data-bs-toggle="modal" data-bs-target="#playerModal${index}" style="cursor:pointer;">
                    <img src="${playerImage}" alt="${playerName}">
                    <div class="player-info">
                        <div class="player-name">${playerName}</div>
                        <div class="player-overall">${playerOverall}</div>
                    </div>
                </div>
            `;

            const modal = document.getElementById('playerModal' + index);
            const bsModal = bootstrap.Modal.getInstance(modal);
            bsModal.hide();
        }

        function slotFromIndex(index) {
            const playerSlots = document.querySelectorAll('.player-slot');
            return playerSlots[index]?.dataset.position;
        }

        document.addEventListener('DOMContentLoaded', function () {
            const formationSelect = document.getElementById('formationSelect');

            function updatePositions(formation) {
                const positions = document.querySelectorAll('.player-slot');
                const [def, mid, fwd] = formation.split('-').map(Number);

                positions[0].style.left = '50%';
                positions[0].style.top = '85%';

                let currentIndex = 1;

                for (let i = 0; i < def; i++) {
                    positions[currentIndex].style.left = `${(100 / (def + 1)) * (i + 1)}%`;
                    positions[currentIndex].style.top = '63%';
                    currentIndex++;
                }

                for (let i = 0; i < mid; i++) {
                    positions[currentIndex].style.left = `${(100 / (mid + 1)) * (i + 1)}%`;
                    positions[currentIndex].style.top = '40%';
                    currentIndex++;
                }

                for (let i = 0; i < fwd; i++) {
                    positions[currentIndex].style.left = `${(100 / (fwd + 1)) * (i + 1)}%`;
                    positions[currentIndex].style.top = '15%';
                    currentIndex++;
                }
            }

            formationSelect.addEventListener('change', function () {
                const selectedFormation = this.value;
                document.getElementById('Formation').value = selectedFormation;
                window.location.href = `/Team/Create?formation=${selectedFormation}`;
            });

            updatePositions(formationSelect.value);

            // Bu kısım butona basılınca çalışacak
            const saveTeamBtn = document.getElementById('saveTeamBtn');

            saveTeamBtn.addEventListener('click', function (e) {
                let allSelected = true;

                document.querySelectorAll('input[name$=".PlayerId"]').forEach((input) => {
                    if (input.value === "" || input.value === "0") {
                        allSelected = false;
                    }
                });

                if (!allSelected) {
                    e.preventDefault(); // Formun submit edilmesini engelle
                    e.stopPropagation();
                    alert("Tüm oyuncuları seçmelisiniz!");
                }
            });
        });

    </script>


    <style>
        .football-field {
            background-image: linear-gradient(#4CAF50, #388E3C);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            height: 600px;
            border-radius: 10px;
            position: relative;
        }

        .football-field::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 2px;
            background: rgba(255, 255, 255, 0.7);
        }

        .football-field::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 100px;
            height: 100px;
            border: 2px solid rgba(255, 255, 255, 0.7);
            border-radius: 50%;
        }

        .penalty-box {
            position: absolute;
            width: 180px;
            height: 70px;
            border: 2px solid white;
            left: 50%;
            transform: translateX(-50%);
            z-index: 0;
        }

        .top-box {
            top: 0;
            border-top: none;
        }

        .bottom-box {
            bottom: 0;
            border-bottom: none;
        }

        .player-card {
            background: rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            width: 80px;
            height: 102px;
            box-shadow: 0 3px 6px rgba(0, 0, 0, 0.2);
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 6px;
            transition: transform 0.25s ease;
        }

        .player-card img {
            width: 67px;
            height: 67px;
            border-radius: 50%;
            object-fit: cover;
            background: white;
        }

        .player-info {
            text-align: center;
            margin-top: 5px;
        }

        .player-name {
            font-size: 11px;
            font-weight: 600;
            text-align: center;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
            max-width: 80px;
            height: 25px;
            line-height: 1.1;
        }

        .player-overall {
            background: #1a5388;
            color: white;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            line-height: 24px;
            font-size: 12px;
            font-weight: bold;
            margin: 0 auto;
        }

        .modal-content {
            background: rgba(20, 20, 20, 0.95);
            color: #ffffffd9;
            border: 1px solid #333;
        }

        .modal-player-card {
            background: rgba(44, 44, 44, 0.85);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .modal-player-card:hover {
            transform: scale(1.03);
        }

        .overall-badge {
            position: absolute;
            top: 8px;
            right: 12px;
            z-index: 2;
        }

        .overall-badge .badge {
            font-size: 1rem;
            padding: 0.4rem 0.6rem;
            background-color: #0d6efd;
            color: white;
        }

        .position-select {
            width: 45px;
            height: 45px;
            border-radius: 50%;
            background: white;
            border: 2px solid #fff;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 22px;
            transition: all 0.3s ease;
        }

        .position-select:hover {
            transform: scale(1.1);
        }
    </style>
}
